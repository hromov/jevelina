// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	contacts "github.com/hromov/jevelina/domain/contacts"

	mock "github.com/stretchr/testify/mock"
)

// ContactsService is an autogenerated mock type for the Service type
type ContactsService struct {
	mock.Mock
}

// Contacts provides a mock function with given fields: _a0, _a1
func (_m *ContactsService) Contacts(_a0 context.Context, _a1 contacts.Filter) (contacts.ContactsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 contacts.ContactsResponse
	if rf, ok := ret.Get(0).(func(context.Context, contacts.Filter) contacts.ContactsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(contacts.ContactsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, contacts.Filter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ContactsService) Create(_a0 context.Context, _a1 contacts.ContactRequest) (contacts.Contact, error) {
	ret := _m.Called(_a0, _a1)

	var r0 contacts.Contact
	if rf, ok := ret.Get(0).(func(context.Context, contacts.ContactRequest) contacts.Contact); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(contacts.Contact)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, contacts.ContactRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrGet provides a mock function with given fields: _a0, _a1
func (_m *ContactsService) CreateOrGet(_a0 context.Context, _a1 contacts.ContactRequest) (contacts.Contact, error) {
	ret := _m.Called(_a0, _a1)

	var r0 contacts.Contact
	if rf, ok := ret.Get(0).(func(context.Context, contacts.ContactRequest) contacts.Contact); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(contacts.Contact)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, contacts.ContactRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *ContactsService) Delete(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *ContactsService) Get(_a0 context.Context, _a1 uint64) (contacts.Contact, error) {
	ret := _m.Called(_a0, _a1)

	var r0 contacts.Contact
	if rf, ok := ret.Get(0).(func(context.Context, uint64) contacts.Contact); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(contacts.Contact)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPhone provides a mock function with given fields: _a0, _a1
func (_m *ContactsService) GetByPhone(_a0 context.Context, _a1 string) (contacts.Contact, error) {
	ret := _m.Called(_a0, _a1)

	var r0 contacts.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string) contacts.Contact); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(contacts.Contact)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *ContactsService) List(_a0 context.Context, _a1 contacts.Filter) (contacts.ContactsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 contacts.ContactsResponse
	if rf, ok := ret.Get(0).(func(context.Context, contacts.Filter) contacts.ContactsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(contacts.ContactsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, contacts.Filter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *ContactsService) Update(_a0 context.Context, _a1 contacts.ContactRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, contacts.ContactRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewContactsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewContactsService creates a new instance of ContactsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContactsService(t mockConstructorTestingTNewContactsService) *ContactsService {
	mock := &ContactsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
