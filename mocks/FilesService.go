// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	files "github.com/hromov/jevelina/domain/misc/files"
	mock "github.com/stretchr/testify/mock"
)

// FilesService is an autogenerated mock type for the Service type
type FilesService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *FilesService) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByParent provides a mock function with given fields: ctx, parentID
func (_m *FilesService) GetByParent(ctx context.Context, parentID uint64) ([]files.File, error) {
	ret := _m.Called(ctx, parentID)

	var r0 []files.File
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []files.File); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]files.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrl provides a mock function with given fields: ctx, id
func (_m *FilesService) GetUrl(ctx context.Context, id uint64) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, uint64) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, req
func (_m *FilesService) Upload(ctx context.Context, req files.FileAddReq) (files.File, error) {
	ret := _m.Called(ctx, req)

	var r0 files.File
	if rf, ok := ret.Get(0).(func(context.Context, files.FileAddReq) files.File); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(files.File)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, files.FileAddReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFilesService interface {
	mock.TestingT
	Cleanup(func())
}

// NewFilesService creates a new instance of FilesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFilesService(t mockConstructorTestingTNewFilesService) *FilesService {
	mock := &FilesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
