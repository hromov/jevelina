// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	tasks "github.com/hromov/jevelina/useCases/tasks"
	mock "github.com/stretchr/testify/mock"
)

// TasksService is an autogenerated mock type for the Service type
type TasksService struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *TasksService) Create(_a0 context.Context, _a1 tasks.TaskData) (tasks.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(context.Context, tasks.TaskData) tasks.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, tasks.TaskData) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *TasksService) Delete(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByParent provides a mock function with given fields: _a0, _a1
func (_m *TasksService) DeleteByParent(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *TasksService) Get(_a0 context.Context, _a1 uint64) (tasks.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(context.Context, uint64) tasks.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *TasksService) List(_a0 context.Context, _a1 tasks.Filter) (tasks.TasksResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tasks.TasksResponse
	if rf, ok := ret.Get(0).(func(context.Context, tasks.Filter) tasks.TasksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tasks.TasksResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, tasks.Filter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *TasksService) Update(_a0 context.Context, _a1 tasks.TaskData) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tasks.TaskData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTasksService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTasksService creates a new instance of TasksService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTasksService(t mockConstructorTestingTNewTasksService) *TasksService {
	mock := &TasksService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
