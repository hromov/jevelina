// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	misc "github.com/hromov/jevelina/domain/misc"
	mock "github.com/stretchr/testify/mock"
)

// MiscService is an autogenerated mock type for the Service type
type MiscService struct {
	mock.Mock
}

// CreateManufacturer provides a mock function with given fields: _a0, _a1
func (_m *MiscService) CreateManufacturer(_a0 context.Context, _a1 misc.Manufacturer) (misc.Manufacturer, error) {
	ret := _m.Called(_a0, _a1)

	var r0 misc.Manufacturer
	if rf, ok := ret.Get(0).(func(context.Context, misc.Manufacturer) misc.Manufacturer); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(misc.Manufacturer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, misc.Manufacturer) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: _a0, _a1
func (_m *MiscService) CreateProduct(_a0 context.Context, _a1 misc.Product) (misc.Product, error) {
	ret := _m.Called(_a0, _a1)

	var r0 misc.Product
	if rf, ok := ret.Get(0).(func(context.Context, misc.Product) misc.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(misc.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, misc.Product) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSource provides a mock function with given fields: _a0, _a1
func (_m *MiscService) CreateSource(_a0 context.Context, _a1 misc.Source) (misc.Source, error) {
	ret := _m.Called(_a0, _a1)

	var r0 misc.Source
	if rf, ok := ret.Get(0).(func(context.Context, misc.Source) misc.Source); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(misc.Source)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, misc.Source) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteManufacturer provides a mock function with given fields: _a0, _a1
func (_m *MiscService) DeleteManufacturer(_a0 context.Context, _a1 uint32) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: _a0, _a1
func (_m *MiscService) DeleteProduct(_a0 context.Context, _a1 uint32) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSource provides a mock function with given fields: _a0, _a1
func (_m *MiscService) DeleteSource(_a0 context.Context, _a1 uint32) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetManufacturer provides a mock function with given fields: _a0, _a1
func (_m *MiscService) GetManufacturer(_a0 context.Context, _a1 uint32) (misc.Manufacturer, error) {
	ret := _m.Called(_a0, _a1)

	var r0 misc.Manufacturer
	if rf, ok := ret.Get(0).(func(context.Context, uint32) misc.Manufacturer); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(misc.Manufacturer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManufacturerByName provides a mock function with given fields: _a0, _a1
func (_m *MiscService) GetManufacturerByName(_a0 context.Context, _a1 string) (misc.Manufacturer, error) {
	ret := _m.Called(_a0, _a1)

	var r0 misc.Manufacturer
	if rf, ok := ret.Get(0).(func(context.Context, string) misc.Manufacturer); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(misc.Manufacturer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: _a0, _a1
func (_m *MiscService) GetProduct(_a0 context.Context, _a1 uint32) (misc.Product, error) {
	ret := _m.Called(_a0, _a1)

	var r0 misc.Product
	if rf, ok := ret.Get(0).(func(context.Context, uint32) misc.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(misc.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByName provides a mock function with given fields: _a0, _a1
func (_m *MiscService) GetProductByName(_a0 context.Context, _a1 string) (misc.Product, error) {
	ret := _m.Called(_a0, _a1)

	var r0 misc.Product
	if rf, ok := ret.Get(0).(func(context.Context, string) misc.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(misc.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSource provides a mock function with given fields: _a0, _a1
func (_m *MiscService) GetSource(_a0 context.Context, _a1 uint32) (misc.Source, error) {
	ret := _m.Called(_a0, _a1)

	var r0 misc.Source
	if rf, ok := ret.Get(0).(func(context.Context, uint32) misc.Source); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(misc.Source)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSourceByName provides a mock function with given fields: _a0, _a1
func (_m *MiscService) GetSourceByName(_a0 context.Context, _a1 string) (misc.Source, error) {
	ret := _m.Called(_a0, _a1)

	var r0 misc.Source
	if rf, ok := ret.Get(0).(func(context.Context, string) misc.Source); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(misc.Source)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManufacturers provides a mock function with given fields: _a0
func (_m *MiscService) ListManufacturers(_a0 context.Context) ([]misc.Manufacturer, error) {
	ret := _m.Called(_a0)

	var r0 []misc.Manufacturer
	if rf, ok := ret.Get(0).(func(context.Context) []misc.Manufacturer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]misc.Manufacturer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: _a0
func (_m *MiscService) ListProducts(_a0 context.Context) ([]misc.Product, error) {
	ret := _m.Called(_a0)

	var r0 []misc.Product
	if rf, ok := ret.Get(0).(func(context.Context) []misc.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]misc.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSources provides a mock function with given fields: _a0
func (_m *MiscService) ListSources(_a0 context.Context) ([]misc.Source, error) {
	ret := _m.Called(_a0)

	var r0 []misc.Source
	if rf, ok := ret.Get(0).(func(context.Context) []misc.Source); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]misc.Source)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManufacturer provides a mock function with given fields: _a0, _a1
func (_m *MiscService) UpdateManufacturer(_a0 context.Context, _a1 misc.Manufacturer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, misc.Manufacturer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: _a0, _a1
func (_m *MiscService) UpdateProduct(_a0 context.Context, _a1 misc.Product) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, misc.Product) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSource provides a mock function with given fields: _a0, _a1
func (_m *MiscService) UpdateSource(_a0 context.Context, _a1 misc.Source) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, misc.Source) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMiscService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMiscService creates a new instance of MiscService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMiscService(t mockConstructorTestingTNewMiscService) *MiscService {
	mock := &MiscService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
